{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport Gim from './gim'; // import GimVx from './gimVx'\n\nimport { wrap } from 'popmotion';\nimport SogumaEye from './sugumaEye';\nimport { theme } from './theme'; // import svgImage from '../public/rightHand.svg'\n\nconst gimsProps = [{\n  id: 0,\n  // needed to fix \" key for map, organize layer order \"\n  type: \"main\",\n  leftRight: 0,\n  next: 1,\n  prev: 2,\n  properties: {\n    title: \"main\",\n    size: 100,\n    posi: {\n      x: 40,\n      y: 55\n    },\n    scale: 2,\n    zIndex: 10\n  }\n}, {\n  id: 1,\n  type: \"next\",\n  leftRight: 1,\n  next: 3,\n  prev: 0,\n  properties: {\n    title: \"next\",\n    size: 60,\n    posi: {\n      x: 85,\n      y: 45\n    },\n    scale: 1.2,\n    zIndex: 10\n  }\n}, {\n  id: 2,\n  type: \"previous\",\n  leftRight: -1,\n  next: 0,\n  prev: 4,\n  properties: {\n    title: \"previous\",\n    size: 80,\n    posi: {\n      x: 5,\n      y: 12\n    },\n    scale: 1.1,\n    zIndex: 10\n  }\n}, {\n  id: 3,\n  type: \"onHold\",\n  leftRight: 1,\n  next: 4,\n  prev: 1,\n  properties: {\n    title: \"...\",\n    size: 50,\n    posi: {\n      x: 60,\n      y: 18\n    },\n    scale: 0.5,\n    zIndex: 0\n  }\n}, {\n  id: 4,\n  type: \"hidden\",\n  leftRight: -1,\n  next: 2,\n  prev: 3,\n  properties: {\n    title: \"hidden\",\n    size: 40,\n    posi: {\n      x: 40,\n      y: 9\n    },\n    scale: 0.4,\n    zIndex: 0\n  }\n}];\nconst data = [\"about me\", \"my projects\", \"art\", \"p1\", \"p2\"];\nexport default function SogumaVx({\n  height,\n  width,\n  setOnDisplay,\n  onDisplay,\n  darkTheme\n}) {\n  const {\n    0: [direction, steps],\n    1: setRotate\n  } = useState([0, 0]); // const { scrollYProgress } = useViewportScroll();\n  // const sogumaScale = useTransform(scrollYProgress, [0, 0.1, 0.5, 1], [1, 1, 0.8, 0.1]);\n  // const sogumaYoffset = useTransform(scrollYProgress, [0, 0.1, 0.5, 1], [0, 0, -100, -500]);\n\n  const currentIndex = wrap(0, 4, steps);\n\n  const nextPosition = newDirection => {\n    setRotate([newDirection, steps + newDirection]);\n  };\n\n  const onSogumaClick = () => {\n    if (onDisplay.displayState) setOnDisplay(false, -1, 0);else nextPosition(-1);\n  };\n\n  const switchId = darkTheme ? 1 : 0;\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"relative flex justify-center items-start h-full w-full \",\n    children: /*#__PURE__*/_jsxs(motion.div, {\n      className: `relative flex flex-col justify-start items-center ${height || \"h-1/2\"} ${width || \"w-1/2\"}  shadow-2xl`,\n      initial: \"initial\",\n      animate: \"standing\",\n      variants: {\n        initial: {\n          y: -410,\n          x: 30,\n          scale: 0.1\n        },\n        standing: {\n          y: 0,\n          x: 0,\n          scale: 1,\n          transition: {\n            duration: 0.5\n          }\n        }\n      } // style={\n      // \t{\n      // \t\tscale : sogumaScale,\n      // \t\ty : sogumaYoffset\n      // \t}\n      // }\n      ,\n      children: [gimsProps.map(gim => /*#__PURE__*/_jsx(Gim, {\n        gimId: gim.id,\n        data: data,\n        direction: direction,\n        steps: steps,\n        nextPosition: nextPosition,\n        setOnDisplay: setOnDisplay,\n        onDisplay: onDisplay,\n        darkTheme: darkTheme\n      }, gim.id)), /*#__PURE__*/_jsx(motion.div, {\n        className: `relative flex flex-col justify-center items-center ${darkTheme ? theme.dark.soguma.body(onDisplay.displayState) : theme.light.soguma.body}`,\n        initial: \"initial\",\n        animate: \"standing\",\n        custom: darkTheme,\n        variants: {\n          initial: darkTheme => {\n            return {\n              scale: !darkTheme ? 1.08 : 1.02,\n              opacity: !darkTheme ? 0 : 1,\n              x: !darkTheme ? 0 : 10,\n              y: -100\n            };\n          },\n          standing: darkTheme => {\n            return {\n              scale: !darkTheme ? 1 : [1.02, 1],\n              opacity: 1,\n              y: [-12, -25],\n              rotate: !darkTheme ? 0 : [0, 0, 0, -20, -13, 20, 21, 20, 20, 15, 0, 0, 0, -25, -17],\n              x: !darkTheme ? 0 : [-5, 0],\n              transition: {\n                y: {\n                  yoyo: Infinity,\n                  duration: 1\n                },\n                duration: 1,\n                x: !darkTheme ? {} : {\n                  duration: 2\n                },\n                scale: {\n                  type: 'spring',\n                  duration: 0.5\n                },\n                rotate: !darkTheme ? {} : {\n                  type: 'spring',\n                  duration: 5,\n                  yoyo: Infinity\n                }\n              }\n            };\n          }\n        },\n        whileHover: {\n          opacity: 1,\n          scale: 1.1,\n          transition: {\n            type: 'spring',\n            duration: 0.6\n          } // boxShadow : '0 0px 20px 8px rgba(255, 255, 255, 0.5)',\n\n        },\n        onMouseDown: () => onSogumaClick(),\n        children: /*#__PURE__*/_jsx(SogumaEye, {\n          darkTheme: darkTheme\n        })\n      }, switchId), onDisplay.displayState && /*#__PURE__*/_jsx(motion.h1, {\n        className: ` ${darkTheme ? theme.dark.soguma.text : theme.light.soguma.text}`,\n        initial: \"textOff\",\n        animate: \"textOn\",\n        variants: {\n          textOff: {\n            y: -100,\n            scale: 0\n          },\n          textOn: {\n            y: 0,\n            scale: 1,\n            transition: {\n              duration: 0.5\n            }\n          }\n        },\n        children: onDisplay.displayState ? data[onDisplay.itemId] : \"\"\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
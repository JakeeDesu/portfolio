{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/hamza/Desktop/portfolio/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hamza/Desktop/portfolio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/home/hamza/Desktop/portfolio/pages/card.js\";\nimport DarkSky from '../components/darkSky'; // import Sogumice from '../components/sogumice'\n// import LoloIcon from '../components/loloIcon'\n\nimport { useRef, useEffect, useState } from 'react';\nimport { motion, useViewportScroll, useTransform } from 'framer-motion';\nimport ImageDisplayer from '../components/imageDisplayer';\nimport DescriptionCard from '../components/descriptionCard'; // import Image from 'next/Image'\n\nexport var geStaticProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('https://api.github.com/users/JakeeDesu');\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              props: {\n                repos: data\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function geStaticProps() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default function Card(_ref2) {\n  var repos = _ref2.repos,\n      onDisplay = _ref2.onDisplay,\n      darkTheme = _ref2.darkTheme,\n      displayGim = _ref2.displayGim;\n  console.log(\"fetched data : \", repos); // const carRef = useRef(false);\n  // const { scrollYProgress } = useViewportScroll();\n  // const cardYOffset = useTransform(scrollYProgress, [ 0 , 0.1 , 0.4 , 1 ], [ 0 , 0 , 0 , 0 ]);\n  // const cardScale = useTransform(scrollYProgress, [ 0 , 0.1 , 0.6 , 1 ], [ 0 , 0.7 , 0.8 , 1 ]);\n  // const cardOpacity = useTransform(scrollYProgress, [ 0 , 0.1 , 0.6 , 1 ], [ 0 , 0.1 , 1 , 1 ]);\n  // const cardretateX = useTransform(scrollYProgress, [ 0 , 0.1 , 0.6 , 1 ], [ -30 , -20 , -20 , 0 ]);\n  // const variants = {\n  // \thidden: (yOffset, cardOpacity) => {\n  // \t\treturn {\n  // \t\t\th : 0,\n  // \t\t\topacity : 0,\n  // \t\t};\n  // \t},\n  // \tshowsUp: (yOffset, cardOpacity) => {\n  // \t\treturn {\n  // \t\t\th : 1000,\n  // \t\t\topacity : 1,\n  // \t\t};\n  // \t}\n  // }\n  // const variants2 = {\n  // \thidden: {\n  // \t\theight : '0%',\n  // \t\th : 0,\n  // \t\topacity : 0,\n  // \t},\n  // \tshowsUp: {\n  // \t\theight : '100%',\n  // \t\th : 1000,\n  // \t\topacity : 1,\n  // \t\t// height:\"auto\",\n  // \t}\n  // }\n\n  return (\n    /*#__PURE__*/\n    // <motion.div className=\"relative flex flex-row justify-between w-full h-screen\" \n    // variants={variants2}\n    // initial={false}\n    // animate={onDisplay.displayState ? \"showsUp\" : \"hidden\"}\n    // >\n    _jsxDEV(motion.div, {\n      className: \"relative flex flex-row justify-between w-full h-screen\" // key={scrollYProgress}\n      // custom={onDisplay.onDisplayState}\n      // initial={false}\n      // animate={onDisplay.displayState ? \"showsUp\" : \"hidden\"}\n      // transition={{\n      // \tduration: 2\n      // }}\n      // style={{\n      // \topacity : cardOpacity,\n      // \ty : cardYOffset,\n      // \tscale : cardScale,\n      // \trotateX: cardretateX,\n      // }}\tvariants={variants}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this) // </motion.div>\n\n  );\n}\n_c = Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/home/hamza/Desktop/portfolio/pages/card.js"],"names":["DarkSky","useRef","useEffect","useState","motion","useViewportScroll","useTransform","ImageDisplayer","DescriptionCard","geStaticProps","fetch","res","json","data","props","repos","Card","onDisplay","darkTheme","displayGim","console","log"],"mappings":";;;;AAAA,OAAOA,OAAP,MAAoB,uBAApB,C,CACA;AACA;;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,MAAT,EAAiBC,iBAAjB,EAAoCC,YAApC,QAAwD,eAAxD;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,eAAP,MAA4B,+BAA5B,C,CACA;;AAEA,OAAO,IAAMC,aAAa;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACVC,KAAK,CAAC,wCAAD,CADK;;AAAA;AACtBC,YAAAA,GADsB;AAAA;AAAA,mBAETA,GAAG,CAACC,IAAJ,EAFS;;AAAA;AAEtBC,YAAAA,IAFsB;AAAA,6CAGrB;AACNC,cAAAA,KAAK,EAAG;AACPC,gBAAAA,KAAK,EAAGF;AADD;AADF,aAHqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbJ,aAAa;AAAA;AAAA;AAAA,GAAnB;AAUP,eAAe,SAASO,IAAT,QACf;AAAA,MAD+BD,KAC/B,SAD+BA,KAC/B;AAAA,MADuCE,SACvC,SADuCA,SACvC;AAAA,MADkDC,SAClD,SADkDA,SAClD;AAAA,MAD6DC,UAC7D,SAD6DA,UAC7D;AACCC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BN,KAA/B,EADD,CAGC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAEC;AACA;AACA;AACA;AAEA;AACC,YAAC,MAAD,CAAQ,GAAR;AAAY,MAAA,SAAS,EAAC,wDAAtB,CACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAbD;AAAA;AAAA;AAAA;AAAA,YARF,CA6BC;;AA7BD;AA+BA;KAvEuBC,I","sourcesContent":["import DarkSky from '../components/darkSky'\n// import Sogumice from '../components/sogumice'\n// import LoloIcon from '../components/loloIcon'\nimport { useRef, useEffect, useState } from 'react'\nimport { motion, useViewportScroll, useTransform } from 'framer-motion'\nimport ImageDisplayer from '../components/imageDisplayer'\nimport DescriptionCard from '../components/descriptionCard'\n// import Image from 'next/Image'\n\nexport const geStaticProps = async () => {\n\tconst res = await fetch('https://api.github.com/users/JakeeDesu');\n\tconst data = await res.json();\n\treturn {\n\t\tprops : {\n\t\t\trepos : data,\n\t\t}\n\t};\n}\n \nexport default function Card({ repos,  onDisplay, darkTheme, displayGim })\n{\n\tconsole.log(\"fetched data : \", repos)\n\n\t// const carRef = useRef(false);\n\t// const { scrollYProgress } = useViewportScroll();\n\t// const cardYOffset = useTransform(scrollYProgress, [ 0 , 0.1 , 0.4 , 1 ], [ 0 , 0 , 0 , 0 ]);\n\t// const cardScale = useTransform(scrollYProgress, [ 0 , 0.1 , 0.6 , 1 ], [ 0 , 0.7 , 0.8 , 1 ]);\n\t// const cardOpacity = useTransform(scrollYProgress, [ 0 , 0.1 , 0.6 , 1 ], [ 0 , 0.1 , 1 , 1 ]);\n\t// const cardretateX = useTransform(scrollYProgress, [ 0 , 0.1 , 0.6 , 1 ], [ -30 , -20 , -20 , 0 ]);\n\n\t// const variants = {\n\t// \thidden: (yOffset, cardOpacity) => {\n\t// \t\treturn {\n\t// \t\t\th : 0,\n\t// \t\t\topacity : 0,\n\t// \t\t};\n\t// \t},\n\t// \tshowsUp: (yOffset, cardOpacity) => {\n\t// \t\treturn {\n\t// \t\t\th : 1000,\n\t// \t\t\topacity : 1,\n\t// \t\t};\n\t// \t}\n\t// }\n\n\t// const variants2 = {\n\t// \thidden: {\n\t// \t\theight : '0%',\n\t// \t\th : 0,\n\t// \t\topacity : 0,\n\t// \t},\n\t// \tshowsUp: {\n\t// \t\theight : '100%',\n\t// \t\th : 1000,\n\t// \t\topacity : 1,\n\t// \t\t// height:\"auto\",\n\t// \t}\n\t// }\n\n\treturn (\n\n\t\t// <motion.div className=\"relative flex flex-row justify-between w-full h-screen\" \n\t\t// variants={variants2}\n\t\t// initial={false}\n\t\t// animate={onDisplay.displayState ? \"showsUp\" : \"hidden\"}\n\n\t\t// >\n\t\t\t<motion.div className=\"relative flex flex-row justify-between w-full h-screen\"\n\t\t\t\t// key={scrollYProgress}\n\t\t\t\t// custom={onDisplay.onDisplayState}\n\t\t\t\t// initial={false}\n\t\t\t\t// animate={onDisplay.displayState ? \"showsUp\" : \"hidden\"}\n\t\t\t\t// transition={{\n\t\t\t\t// \tduration: 2\n\t\t\t\t// }}\n\t\t\t\t// style={{\n\t\t\t\t// \topacity : cardOpacity,\n\t\t\t\t// \ty : cardYOffset,\n\t\t\t\t// \tscale : cardScale,\n\t\t\t\t// \trotateX: cardretateX,\n\t\t\t\t// }}\tvariants={variants}\n\t\t\t\n\t\t\t>\n\t\t\t\t{/* <motion.div className=\"h-100 w-100 text-white\" onTap={(event, info) => displayGim()}>click me</motion.div> */}\n\n\t\t\t\t{/* <DescriptionCard />\n\t\t\t\t<ImageDisplayer /> */}\n\t\t\t</motion.div>\n\t\t// </motion.div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}
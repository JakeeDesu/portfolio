{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('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'); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? `Bearer ${token}` : \"\"\n    })\n  };\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  // uri: \"https://api.github.com/graphql\",\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/goinfre/hmhindat/portfolio/apollo-client.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,MAAMC,QAAQ,GAAGF,cAAc,CAAC;AAC9BG,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,0CAArB,CAAd,CAF8C,CAG9C;;AACA,SAAO;AACLH,IAAAA,OAAO,kCACFA,OADE;AAELI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,GAAP;AAMD,CAV0B,CAA3B;AAYA,MAAMI,MAAM,GAAG,IAAIb,YAAJ,CAAiB;AAC5Bc,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CADsB;AAE5B;AACAY,EAAAA,KAAK,EAAE,IAAIf,aAAJ;AAHqB,CAAjB,CAAf;AAMA,eAAeY,MAAf","sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('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');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    // uri: \"https://api.github.com/graphql\",\n    cache: new InMemoryCache(),\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport SogumaTitle from './sogumaTitle';\nimport { motion } from 'framer-motion';\nimport { theme } from './theme';\nimport { gimsProps, fromProps } from './gimProps'; // gims props\n\nvar getGimPropsById = function getGimPropsById(gimId) {\n  return gimsProps.filter(function (gimProps) {\n    return gimProps.id == gimId;\n  }).pop() || gimsProps[0];\n};\n\nfunction Gim(_ref) {\n  var data = _ref.data,\n      gimId = _ref.gimId,\n      direction = _ref.direction,\n      steps = _ref.steps,\n      moveGims = _ref.moveGims,\n      setOnDisplay = _ref.setOnDisplay,\n      onDisplay = _ref.onDisplay,\n      darkTheme = _ref.darkTheme;\n  var currentGim = getGimPropsById(gimId);\n  var prevGim = direction < 0 && !onDisplay.displayState ? getGimPropsById(currentGim.prev) : getGimPropsById(currentGim.next);\n  var animationKey = onDisplay.displayState ? steps + 1 : steps;\n  var variants = {\n    enter: function enter(onDisplay) {\n      return {\n        y: 0,\n        top: onDisplay.displayState ? \"\".concat(currentGim.properties.posi.y, \"%\") : onDisplay.displayOff ? \"\".concat(fromProps.properties.posi.y, \"%\") : \"\".concat(prevGim.properties.posi.y, \"%\"),\n        left: onDisplay.displayState ? \"\".concat(currentGim.properties.posi.x, \"%\") : onDisplay.displayOff ? \"\".concat(fromProps.properties.posi.x, \"%\") : \"\".concat(prevGim.properties.posi.x, \"%\"),\n        scale: onDisplay.displayState ? currentGim.properties.scale : onDisplay.displayOff ? fromProps.properties.scale : prevGim.properties.scale,\n        zIndex: prevGim.properties.zIndex\n      };\n    },\n    standing: function standing(onDisplay) {\n      return {\n        y: onDisplay.displayState ? 0 : [-10, 10],\n        top: onDisplay.displayState ? \"\".concat(fromProps.properties.posi.y, \"%\") : \"\".concat(currentGim.properties.posi.y, \"%\"),\n        left: onDisplay.displayState ? \"\".concat(fromProps.properties.posi.x, \"%\") : \"\".concat(currentGim.properties.posi.x, \"%\"),\n        scale: onDisplay.displayState ? fromProps.properties.scale : currentGim.properties.scale,\n        zIndex: onDisplay.displayState ? fromProps.properties.zIndex : gimId == 2 || onDisplay.displayOff ? 0 : currentGim.properties.zIndex,\n        transition: {\n          y: {\n            yoyo: Infinity,\n            duration: 1\n          },\n          type: \"spring\",\n          duration: 1.3\n        }\n      };\n    },\n    display: {\n      scale: currentGim.properties.scale,\n      boxShadow: 'none',\n      y: 0,\n      top: '',\n      left: '50%',\n      bottom: '0%',\n      transition: {\n        type: \"spring\",\n        duration: 0.8\n      }\n    },\n    hover: function hover(onDisplay) {\n      if (!(onDisplay.displayState || onDisplay.displayOff)) return {\n        opacity: 1,\n        scale: currentGim.properties.scale * 1.2,\n        transition: {\n          duration: 0.3\n        }\n      };\n    }\n  };\n  var currentData = getGimCurrenData(data, gimId, steps, direction);\n\n  var clickGim = function clickGim() {\n    if (gimId == 0) setOnDisplay(!onDisplay.displayState, fixGimsDataIndex(data, steps + 1), 0);else if (!onDisplay.displayState) moveGims(currentGim.leftRight);\n    return false;\n  };\n\n  return /*#__PURE__*/_jsx(motion.div, {\n    className: \"absolute  md:flex justify-center items-center hidden \".concat(darkTheme && theme.dark.gims.style(false) || theme.light.gims.style),\n    variants: variants,\n    initial: \"enter\",\n    animate: \"standing\",\n    custom: onDisplay,\n    drag: true,\n    dragConstraints: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    },\n    whileHover: \"hover\",\n    onMouseDown: function onMouseDown() {\n      return clickGim();\n    },\n    children: /*#__PURE__*/_jsx(SogumaTitle, {\n      darkTheme: darkTheme,\n      text: currentData ? currentData.current : \"\"\n    })\n  }, animationKey);\n}\n\nfunction fixGimsDataIndex(data, steps) {\n  var fixedIndex = steps < 0 ? (data.length + steps % data.length) % data.length : steps % data.length;\n  return fixedIndex;\n}\n\nfunction getGimCurrenData(data, gimId, moveSteps, moveDirection) {\n  switch (gimId) {\n    case 0:\n      // main gim\n      return {\n        current: data[fixGimsDataIndex(data, moveSteps + 1)],\n        next: data[fixGimsDataIndex(data, moveSteps + 2)],\n        prev: data[fixGimsDataIndex(data, moveSteps)]\n      };\n\n    case 1:\n      // next gim\n      return {\n        current: data[fixGimsDataIndex(data, moveSteps + 2)],\n        next: data[fixGimsDataIndex(data, moveSteps + 3)],\n        prev: data[fixGimsDataIndex(data, moveSteps + 1)]\n      };\n\n    case 2:\n      // prev gim\n      return {\n        current: data[fixGimsDataIndex(data, moveSteps)],\n        next: data[fixGimsDataIndex(data, moveSteps - 1)],\n        prev: data[fixGimsDataIndex(data, moveSteps + 1)]\n      };\n\n    case 3:\n      // onHold gim\n      return {\n        current: data[fixGimsDataIndex(data, moveSteps + 3)],\n        next: data[fixGimsDataIndex(data, moveSteps + 4)],\n        prev: data[fixGimsDataIndex(data, moveSteps + 2)]\n      };\n\n    case 4:\n      // hidden gim\n      var updatedIndex = moveDirection < 0 ? moveSteps : moveSteps + 3;\n      return {\n        current: data[fixGimsDataIndex(data, moveSteps + 4)],\n        next: data[fixGimsDataIndex(data, moveSteps + 5)],\n        prev: data[fixGimsDataIndex(data, updatedIndex)]\n      };\n  }\n\n  return 0;\n}\n\nexport default Gim;","map":null,"metadata":{},"sourceType":"module"}
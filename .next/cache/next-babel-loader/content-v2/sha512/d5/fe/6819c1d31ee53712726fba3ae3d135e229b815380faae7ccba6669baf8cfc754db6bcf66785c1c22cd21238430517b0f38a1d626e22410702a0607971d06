{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState, useRef, useEffect } from 'react';\nexport var useFocus = function useFocus() {\n  _s();\n\n  var _useState = useState(false),\n      start = _useState[0],\n      setStart = _useState[1];\n\n  var ref = useRef(null);\n  useEffect(function () {\n    console.log(\"- scrollHook useEffect\");\n\n    if (ref.current && start) {\n      console.log(\"  - lanch scrollIntoView() \");\n      ref.current.scrollIntoView({\n        behavior: 'smooth'\n      }); // setStart(false)\n    }\n  }, [start]);\n  var setTrigger = useCallback(function (value) {\n    console.log(\"- launch setTriger(true) \");\n    if (value !== start) setStart(value);\n  });\n  var setRef = useCallback(function (node) {\n    console.log(\"- setRef callback()\");\n\n    if (ref.current) {\n      console.log(\"ref.current not empty \");\n    }\n\n    if (!node) {\n      console.log(\"element not passed \");\n    }\n\n    ref.current = node;\n    setStart(false);\n  }, []);\n  return [setRef, setTrigger];\n};\n\n_s(useFocus, \"2lGcWRouwEew+LMTK32vRtKEMFk=\");","map":{"version":3,"sources":["/home/hamza/Desktop/portfolio/components/useFocus.js"],"names":["useCallback","useState","useRef","useEffect","useFocus","start","setStart","ref","console","log","current","scrollIntoView","behavior","setTrigger","value","setRef","node"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AAAA,kBACHH,QAAQ,CAAC,KAAD,CADL;AAAA,MACtBI,KADsB;AAAA,MACfC,QADe;;AAE7B,MAAMC,GAAG,GAAGL,MAAM,CAAC,IAAD,CAAlB;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACfK,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,QAAIF,GAAG,CAACG,OAAJ,IAAeL,KAAnB,EACA;AACCG,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAF,MAAAA,GAAG,CAACG,OAAJ,CAAYC,cAAZ,CAA2B;AAAEC,QAAAA,QAAQ,EAAG;AAAb,OAA3B,EAFD,CAGC;AACA;AACD,GARQ,EAQN,CAACP,KAAD,CARM,CAAT;AAUA,MAAMQ,UAAU,GAAGb,WAAW,CAAC,UAACc,KAAD,EAAW;AACzCN,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,QAAIK,KAAK,KAAKT,KAAd,EACCC,QAAQ,CAACQ,KAAD,CAAR;AACD,GAJ6B,CAA9B;AAMA,MAAMC,MAAM,GAAGf,WAAW,CAAC,UAAAgB,IAAI,EAAI;AAClCR,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AAEA,QAAIF,GAAG,CAACG,OAAR,EACA;AACCF,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA;;AACD,QAAI,CAACO,IAAL,EACA;AACCR,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA;;AAEDF,IAAAA,GAAG,CAACG,OAAJ,GAAcM,IAAd;AACAV,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,GAdyB,EAcvB,EAduB,CAA1B;AAgBA,SAAO,CAACS,MAAD,EAASF,UAAT,CAAP;AACA,CArCM;;GAAMT,Q","sourcesContent":["import { useCallback, useState, useRef, useEffect } from 'react'\n\nexport const useFocus = () => {\n\tconst [start, setStart] = useState(false)\n\tconst ref = useRef(null)\n\n\tuseEffect(() => {\n\t\tconsole.log(\"- scrollHook useEffect\")\n\t\tif (ref.current && start)\n\t\t{\n\t\t\tconsole.log(\"  - lanch scrollIntoView() \")\n\t\t\tref.current.scrollIntoView({ behavior : 'smooth' })\n\t\t\t// setStart(false)\n\t\t}\n\t}, [start])\n\n\tconst setTrigger = useCallback((value) => {\n\t\tconsole.log(\"- launch setTriger(true) \")\n\t\tif (value !== start)\n\t\t\tsetStart(value)\n\t})\n\n\tconst setRef = useCallback(node => {\n\t\tconsole.log(\"- setRef callback()\")\n\n\t\tif (ref.current)\n\t\t{\n\t\t\tconsole.log(\"ref.current not empty \");\n\t\t}\n\t\tif (!node)\n\t\t{\n\t\t\tconsole.log(\"element not passed \");\n\t\t}\n\n\t\tref.current = node\n\t\tsetStart(false)\n\t}, [])\n\n\treturn [setRef, setTrigger]\n}"]},"metadata":{},"sourceType":"module"}
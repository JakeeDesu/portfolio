{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport Gim from './gim';\nimport Soguma from './soguma';\nimport Menu from './menu';\nimport { gimsProps } from './gimProps'; // gims props\n\nconst variants = {\n  initial: onDisplay => {\n    if (onDisplay.displayState) return {\n      y: 0,\n      scale: 1\n    };else return {\n      y: -100,\n      //-410,\n      scale: 0.7 //0.1,\n\n    };\n  },\n  standing: onDisplay => {\n    if (onDisplay.displayState) return {\n      scale: [1, 0.7],\n      y: [0, -100],\n      transition: {\n        scale: {\n          delay: 0.3,\n          duration: 1\n        },\n        y: {\n          delay: 0.3,\n          duration: 1\n        }\n      }\n    };else return {\n      y: 0,\n      // x: 0,\n      scale: 1,\n      transition: {\n        // duration: 0.5,\n        scale: {\n          delay: 0.3,\n          duration: 1\n        },\n        y: {\n          delay: 0.3,\n          duration: 1\n        }\n      }\n    };\n  }\n};\nconst data = [\"art\", \"about me\", \"p1\"];\nexport default function SogumaVx({\n  fetchedData,\n  loading,\n  setOnDisplay,\n  onDisplay,\n  darkTheme\n}) {\n  const {\n    0: [direction, steps],\n    1: setRotate\n  } = useState([0, 0]);\n  const {\n    0: clickOff,\n    1: setClickOff\n  } = useState(true);\n\n  const moveGims = newDirection => {\n    setRotate([newDirection, steps + newDirection]);\n  };\n\n  console.log(\"fetched DATA : \", fetchedData); // useEffect(() => {\n  // }, [fetchedData])\n\n  const onSogumaClick = () => {\n    switch (onDisplay.type) {\n      case -1:\n        // none state\n        setOnDisplay(true, onDisplay.itemId, 0);\n        break;\n\n      case 0:\n        // menu state\n        setOnDisplay(true, onDisplay.itemId, -1);\n        break;\n\n      case 1:\n        // about state\n        setOnDisplay(true, onDisplay.itemId, 0);\n        break;\n\n      case 2:\n        //  case 1) gims on display | case 2) a project on display \n        if (!onDisplay.displayOff) onDisplay.displayState ? setOnDisplay(true, -1, -1) : moveGims(-1);\n        break;\n\n      case 3:\n        break;\n    }\n  };\n\n  const onDisplayKey = onDisplay.displayState ? 1 : 0;\n  return /*#__PURE__*/_jsxs(motion.div, {\n    className: \"relative flex flex-col justify-start items-center h-full w-full \",\n    initial: \"initial\",\n    animate: \"standing\",\n    custom: onDisplay,\n    variants: variants,\n    children: [onDisplay.type === 2 && gimsProps.map(gim => /*#__PURE__*/_jsx(Gim, {\n      gimId: gim.id,\n      data: data,\n      direction: direction,\n      steps: steps,\n      moveGims: moveGims,\n      setOnDisplay: setOnDisplay,\n      onDisplay: onDisplay,\n      darkTheme: darkTheme\n    }, gim.id)), onDisplay.type != 2 && /*#__PURE__*/_jsx(Menu, {\n      onDisplay: onDisplay,\n      setOnDisplay: setOnDisplay\n    }), /*#__PURE__*/_jsx(Soguma, {\n      onDisplay: onDisplay,\n      darkTheme: darkTheme,\n      onSogumaClick: onSogumaClick\n    })]\n  }, onDisplayKey);\n}\nexport async function getStaticProps(context) {\n  const res = await fetch('https://api.github.com/users/JakeeDesu');\n  const brutData = await res.json(); // if (!data) {\n  //   return {\n  // \tredirect: {\n  // \t  destination: '/',\n  // \t  permanent: false,\n  // \t},\n  //   }\n  // }\n\n  return {\n    props: {\n      fetchedData: brutData\n    } // will be passed to the page component as props\n\n  };\n} // export const getStaticProps = async (context) => {\n// \tconst res = await fetch('https://api.github.com/users/JakeeDesu');\n// \tconst brutData = await res.json();\n// \tconsole.log( brutData )\n// \t// const loading = brutData ? true : false;\n// \treturn {\n// \t\tprops : { fetchedData : brutData }\n// \t}\n// }","map":null,"metadata":{},"sourceType":"module"}